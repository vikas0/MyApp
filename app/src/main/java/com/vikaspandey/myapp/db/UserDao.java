package com.vikaspandey.myapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Rank = new Property(3, String.class, "rank", false, "RANK");
        public final static Property Current_dimes = new Property(4, Integer.class, "current_dimes", false, "CURRENT_DIMES");
        public final static Property Karma = new Property(5, Integer.class, "karma", false, "KARMA");
        public final static Property Fpd_count = new Property(6, Integer.class, "fpd_count", false, "FPD_COUNT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMAGE\" TEXT," + // 2: image
                "\"RANK\" TEXT," + // 3: rank
                "\"CURRENT_DIMES\" INTEGER," + // 4: current_dimes
                "\"KARMA\" INTEGER," + // 5: karma
                "\"FPD_COUNT\" INTEGER);"); // 6: fpd_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        Integer current_dimes = entity.getCurrent_dimes();
        if (current_dimes != null) {
            stmt.bindLong(5, current_dimes);
        }
 
        Integer karma = entity.getKarma();
        if (karma != null) {
            stmt.bindLong(6, karma);
        }
 
        Integer fpd_count = entity.getFpd_count();
        if (fpd_count != null) {
            stmt.bindLong(7, fpd_count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        Integer current_dimes = entity.getCurrent_dimes();
        if (current_dimes != null) {
            stmt.bindLong(5, current_dimes);
        }
 
        Integer karma = entity.getKarma();
        if (karma != null) {
            stmt.bindLong(6, karma);
        }
 
        Integer fpd_count = entity.getFpd_count();
        if (fpd_count != null) {
            stmt.bindLong(7, fpd_count);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rank
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // current_dimes
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // karma
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // fpd_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRank(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrent_dimes(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setKarma(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFpd_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
