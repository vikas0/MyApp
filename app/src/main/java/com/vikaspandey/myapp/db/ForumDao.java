package com.vikaspandey.myapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORUM".
*/
public class ForumDao extends AbstractDao<Forum, Long> {

    public static final String TABLENAME = "FORUM";

    /**
     * Properties of entity Forum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Topics_count = new Property(3, Integer.class, "topics_count", false, "TOPICS_COUNT");
        public final static Property Posts_count = new Property(4, Integer.class, "posts_count", false, "POSTS_COUNT");
        public final static Property Last_activity_at = new Property(5, Long.class, "last_activity_at", false, "LAST_ACTIVITY_AT");
        public final static Property Have_subforum = new Property(6, Boolean.class, "have_subforum", false, "HAVE_SUBFORUM");
    };


    public ForumDao(DaoConfig config) {
        super(config);
    }
    
    public ForumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORUM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"TOPICS_COUNT\" INTEGER," + // 3: topics_count
                "\"POSTS_COUNT\" INTEGER," + // 4: posts_count
                "\"LAST_ACTIVITY_AT\" INTEGER," + // 5: last_activity_at
                "\"HAVE_SUBFORUM\" INTEGER);"); // 6: have_subforum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORUM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Forum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Integer topics_count = entity.getTopics_count();
        if (topics_count != null) {
            stmt.bindLong(4, topics_count);
        }
 
        Integer posts_count = entity.getPosts_count();
        if (posts_count != null) {
            stmt.bindLong(5, posts_count);
        }
 
        Long last_activity_at = entity.getLast_activity_at();
        if (last_activity_at != null) {
            stmt.bindLong(6, last_activity_at);
        }
 
        Boolean have_subforum = entity.getHave_subforum();
        if (have_subforum != null) {
            stmt.bindLong(7, have_subforum ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Forum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Integer topics_count = entity.getTopics_count();
        if (topics_count != null) {
            stmt.bindLong(4, topics_count);
        }
 
        Integer posts_count = entity.getPosts_count();
        if (posts_count != null) {
            stmt.bindLong(5, posts_count);
        }
 
        Long last_activity_at = entity.getLast_activity_at();
        if (last_activity_at != null) {
            stmt.bindLong(6, last_activity_at);
        }
 
        Boolean have_subforum = entity.getHave_subforum();
        if (have_subforum != null) {
            stmt.bindLong(7, have_subforum ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Forum readEntity(Cursor cursor, int offset) {
        Forum entity = new Forum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // topics_count
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // posts_count
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // last_activity_at
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // have_subforum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Forum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTopics_count(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPosts_count(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLast_activity_at(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setHave_subforum(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Forum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Forum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
