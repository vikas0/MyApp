package com.vikaspandey.myapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC".
*/
public class TopicDao extends AbstractDao<Topic, Long> {

    public static final String TABLENAME = "TOPIC";

    /**
     * Properties of entity Topic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fpd_flag = new Property(1, Boolean.class, "fpd_flag", false, "FPD_FLAG");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Forum_name = new Property(3, String.class, "forum_name", false, "FORUM_NAME");
        public final static Property Share_url = new Property(4, String.class, "share_url", false, "SHARE_URL");
        public final static Property Updated_at = new Property(5, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property View_count = new Property(6, Integer.class, "view_count", false, "VIEW_COUNT");
        public final static Property Posts_count = new Property(7, Integer.class, "posts_count", false, "POSTS_COUNT");
        public final static Property Score = new Property(8, Integer.class, "score", false, "SCORE");
        public final static Property Front_page_suggestions_count = new Property(9, Integer.class, "front_page_suggestions_count", false, "FRONT_PAGE_SUGGESTIONS_COUNT");
        public final static Property Last_activity_at = new Property(10, Long.class, "last_activity_at", false, "LAST_ACTIVITY_AT");
    };


    public TopicDao(DaoConfig config) {
        super(config);
    }
    
    public TopicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FPD_FLAG\" INTEGER," + // 1: fpd_flag
                "\"TITLE\" TEXT," + // 2: title
                "\"FORUM_NAME\" TEXT," + // 3: forum_name
                "\"SHARE_URL\" TEXT," + // 4: share_url
                "\"UPDATED_AT\" TEXT," + // 5: updated_at
                "\"VIEW_COUNT\" INTEGER," + // 6: view_count
                "\"POSTS_COUNT\" INTEGER," + // 7: posts_count
                "\"SCORE\" INTEGER," + // 8: score
                "\"FRONT_PAGE_SUGGESTIONS_COUNT\" INTEGER," + // 9: front_page_suggestions_count
                "\"LAST_ACTIVITY_AT\" INTEGER);"); // 10: last_activity_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Topic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean fpd_flag = entity.getFpd_flag();
        if (fpd_flag != null) {
            stmt.bindLong(2, fpd_flag ? 1L: 0L);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String forum_name = entity.getForum_name();
        if (forum_name != null) {
            stmt.bindString(4, forum_name);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        Integer view_count = entity.getView_count();
        if (view_count != null) {
            stmt.bindLong(7, view_count);
        }
 
        Integer posts_count = entity.getPosts_count();
        if (posts_count != null) {
            stmt.bindLong(8, posts_count);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(9, score);
        }
 
        Integer front_page_suggestions_count = entity.getFront_page_suggestions_count();
        if (front_page_suggestions_count != null) {
            stmt.bindLong(10, front_page_suggestions_count);
        }
 
        Long last_activity_at = entity.getLast_activity_at();
        if (last_activity_at != null) {
            stmt.bindLong(11, last_activity_at);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Topic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean fpd_flag = entity.getFpd_flag();
        if (fpd_flag != null) {
            stmt.bindLong(2, fpd_flag ? 1L: 0L);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String forum_name = entity.getForum_name();
        if (forum_name != null) {
            stmt.bindString(4, forum_name);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        Integer view_count = entity.getView_count();
        if (view_count != null) {
            stmt.bindLong(7, view_count);
        }
 
        Integer posts_count = entity.getPosts_count();
        if (posts_count != null) {
            stmt.bindLong(8, posts_count);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(9, score);
        }
 
        Integer front_page_suggestions_count = entity.getFront_page_suggestions_count();
        if (front_page_suggestions_count != null) {
            stmt.bindLong(10, front_page_suggestions_count);
        }
 
        Long last_activity_at = entity.getLast_activity_at();
        if (last_activity_at != null) {
            stmt.bindLong(11, last_activity_at);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Topic readEntity(Cursor cursor, int offset) {
        Topic entity = new Topic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // fpd_flag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // forum_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // share_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // view_count
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // posts_count
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // score
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // front_page_suggestions_count
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // last_activity_at
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Topic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFpd_flag(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setForum_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShare_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setView_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPosts_count(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setScore(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFront_page_suggestions_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLast_activity_at(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Topic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Topic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
