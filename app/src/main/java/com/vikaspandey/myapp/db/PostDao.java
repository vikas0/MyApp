package com.vikaspandey.myapp.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST".
*/
public class PostDao extends AbstractDao<Post, Long> {

    public static final String TABLENAME = "POST";

    /**
     * Properties of entity Post.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property Text_raw = new Property(2, String.class, "text_raw", false, "TEXT_RAW");
        public final static Property Created_at = new Property(3, Long.class, "created_at", false, "CREATED_AT");
        public final static Property Like_count = new Property(4, Integer.class, "like_count", false, "LIKE_COUNT");
        public final static Property Post_like_status = new Property(5, Boolean.class, "post_like_status", false, "POST_LIKE_STATUS");
        public final static Property User_id = new Property(6, Long.class, "user_id", false, "USER_ID");
        public final static Property Topic_id = new Property(7, Long.class, "topic_id", false, "TOPIC_ID");
        public final static Property Forum_id = new Property(8, Long.class, "forum_id", false, "FORUM_ID");
    };

    private DaoSession daoSession;


    public PostDao(DaoConfig config) {
        super(config);
    }
    
    public PostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEXT\" TEXT," + // 1: text
                "\"TEXT_RAW\" TEXT," + // 2: text_raw
                "\"CREATED_AT\" INTEGER," + // 3: created_at
                "\"LIKE_COUNT\" INTEGER," + // 4: like_count
                "\"POST_LIKE_STATUS\" INTEGER," + // 5: post_like_status
                "\"USER_ID\" INTEGER," + // 6: user_id
                "\"TOPIC_ID\" INTEGER," + // 7: topic_id
                "\"FORUM_ID\" INTEGER);"); // 8: forum_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Post entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
 
        String text_raw = entity.getText_raw();
        if (text_raw != null) {
            stmt.bindString(3, text_raw);
        }
 
        Long created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(4, created_at);
        }
 
        Integer like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindLong(5, like_count);
        }
 
        Boolean post_like_status = entity.getPost_like_status();
        if (post_like_status != null) {
            stmt.bindLong(6, post_like_status ? 1L: 0L);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        Long topic_id = entity.getTopic_id();
        if (topic_id != null) {
            stmt.bindLong(8, topic_id);
        }
 
        Long forum_id = entity.getForum_id();
        if (forum_id != null) {
            stmt.bindLong(9, forum_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Post entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
 
        String text_raw = entity.getText_raw();
        if (text_raw != null) {
            stmt.bindString(3, text_raw);
        }
 
        Long created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(4, created_at);
        }
 
        Integer like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindLong(5, like_count);
        }
 
        Boolean post_like_status = entity.getPost_like_status();
        if (post_like_status != null) {
            stmt.bindLong(6, post_like_status ? 1L: 0L);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        Long topic_id = entity.getTopic_id();
        if (topic_id != null) {
            stmt.bindLong(8, topic_id);
        }
 
        Long forum_id = entity.getForum_id();
        if (forum_id != null) {
            stmt.bindLong(9, forum_id);
        }
    }

    @Override
    protected final void attachEntity(Post entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Post readEntity(Cursor cursor, int offset) {
        Post entity = new Post( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text_raw
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // created_at
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // like_count
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // post_like_status
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // topic_id
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // forum_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Post entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText_raw(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated_at(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLike_count(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPost_like_status(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTopic_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setForum_id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Post entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Post entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTopicDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getForumDao().getAllColumns());
            builder.append(" FROM POST T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TOPIC T1 ON T.\"TOPIC_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN FORUM T2 ON T.\"FORUM_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Post loadCurrentDeep(Cursor cursor, boolean lock) {
        Post entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        Topic topic = loadCurrentOther(daoSession.getTopicDao(), cursor, offset);
        entity.setTopic(topic);
        offset += daoSession.getTopicDao().getAllColumns().length;

        Forum forum = loadCurrentOther(daoSession.getForumDao(), cursor, offset);
        entity.setForum(forum);

        return entity;    
    }

    public Post loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Post> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Post> list = new ArrayList<Post>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Post> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Post> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
