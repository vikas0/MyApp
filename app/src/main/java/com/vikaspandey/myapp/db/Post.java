package com.vikaspandey.myapp.db;

import org.greenrobot.greendao.annotation.*;

import com.vikaspandey.myapp.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "POST".
 */
@Entity(active = true)
public class Post {

    @Id
    private Long id;
    private String text;
    private String text_raw;
    private Long created_at;
    private Integer like_count;
    private Boolean post_like_status;
    private Long user_id;
    private Long topic_id;
    private Long forum_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient PostDao myDao;

    @ToOne(joinProperty = "user_id")
    private User user;

    @Generated
    private transient Long user__resolvedKey;

    @ToOne(joinProperty = "topic_id")
    private Topic topic;

    @Generated
    private transient Long topic__resolvedKey;

    @ToOne(joinProperty = "forum_id")
    private Forum forum;

    @Generated
    private transient Long forum__resolvedKey;

    @Generated
    public Post() {
    }

    public Post(Long id) {
        this.id = id;
    }

    @Generated
    public Post(Long id, String text, String text_raw, Long created_at, Integer like_count, Boolean post_like_status, Long user_id, Long topic_id, Long forum_id) {
        this.id = id;
        this.text = text;
        this.text_raw = text_raw;
        this.created_at = created_at;
        this.like_count = like_count;
        this.post_like_status = post_like_status;
        this.user_id = user_id;
        this.topic_id = topic_id;
        this.forum_id = forum_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getText_raw() {
        return text_raw;
    }

    public void setText_raw(String text_raw) {
        this.text_raw = text_raw;
    }

    public Long getCreated_at() {
        return created_at;
    }

    public void setCreated_at(Long created_at) {
        this.created_at = created_at;
    }

    public Integer getLike_count() {
        return like_count;
    }

    public void setLike_count(Integer like_count) {
        this.like_count = like_count;
    }

    public Boolean getPost_like_status() {
        return post_like_status;
    }

    public void setPost_like_status(Boolean post_like_status) {
        this.post_like_status = post_like_status;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public Long getTopic_id() {
        return topic_id;
    }

    public void setTopic_id(Long topic_id) {
        this.topic_id = topic_id;
    }

    public Long getForum_id() {
        return forum_id;
    }

    public void setForum_id(Long forum_id) {
        this.forum_id = forum_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public User getUser() {
        Long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    @Generated
    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            user_id = user == null ? null : user.getId();
            user__resolvedKey = user_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Topic getTopic() {
        Long __key = this.topic_id;
        if (topic__resolvedKey == null || !topic__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TopicDao targetDao = daoSession.getTopicDao();
            Topic topicNew = targetDao.load(__key);
            synchronized (this) {
                topic = topicNew;
            	topic__resolvedKey = __key;
            }
        }
        return topic;
    }

    @Generated
    public void setTopic(Topic topic) {
        synchronized (this) {
            this.topic = topic;
            topic_id = topic == null ? null : topic.getId();
            topic__resolvedKey = topic_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Forum getForum() {
        Long __key = this.forum_id;
        if (forum__resolvedKey == null || !forum__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ForumDao targetDao = daoSession.getForumDao();
            Forum forumNew = targetDao.load(__key);
            synchronized (this) {
                forum = forumNew;
            	forum__resolvedKey = __key;
            }
        }
        return forum;
    }

    @Generated
    public void setForum(Forum forum) {
        synchronized (this) {
            this.forum = forum;
            forum_id = forum == null ? null : forum.getId();
            forum__resolvedKey = forum_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
